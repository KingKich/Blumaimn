The Script Below is a Gun System

-----------------------------------------------------------<<< Variables
---// Services

local TweenService = game:GetService("TweenService")
local UserInput = game:GetService("UserInputService")

---// Player Variables

local Player = game.Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Backpack = Player.Backpack
local HumanoidRootPart: Part = Character:WaitForChild("HumanoidRootPart")

while not Backpack do
	task.wait()
end

local Camera = workspace.CurrentCamera
local Mouse = Player:GetMouse()
local Storage = game.ReplicatedStorage

local GunFolder = Storage:WaitForChild("Gun")
local ModulesFolder = Storage:WaitForChild("Modules")
local EffectsFolder = GunFolder:WaitForChild("Effects")

---// Properties
local Upgrade = 1

-----------------------------------------------------------<<< Early Code

Mouse.Icon = "rbxassetid://18495779444"

-----------------------------------------------------------<<< Functions

Here, we are raycasting to see what Position the bullet is going to land on.

local GunParams = RaycastParams.new()
GunParams.FilterType = Enum.RaycastFilterType.Exclude
GunParams.FilterDescendantsInstances = {Character}

local function MouseRaycast(Params, Origin, Position2: Vector3)
	
	local MousePos = UserInput:GetMouseLocation() -- Gets Mouse Position
	local MouseRay = Camera:ViewportPointToRay(MousePos.X, MousePos.Y)
	local result = workspace:Raycast(MouseRay.Origin, MouseRay.Direction * 100, Params)  -- Casts a Ray to the Mouse Position

	if result then
		return result
	end

end

-----------------------------------------------------------<<< Gun Functionality

local Gun = Backpack:WaitForChild("Gun")
local BulletsFolder = GunFolder:WaitForChild("Bullets")
local GunUpgrades = require(ModulesFolder:WaitForChild("GunUpgrades")) 

Gun.Parent = Character

-- This Function Runs Through a List of particles, Emits them to Create a Gun Firing Effect.

local function CreateBulletEffects(Bullet: Part | UnionOperation)
	local BulletPos = Bullet.Position
	local newBlast = EffectsFolder.Blast:Clone()
	
	for _, v: ParticleEmitter in newBlast:GetChildren() do
		v.Parent = Bullet
		v:Emit()
	end
	task.wait(.5)
	newBlast:Destroy()
end

local function FireBullet()

	local TargetPos	
	TargetPos = Mouse.Hit -- Gets Mouse CFrame

	-- || Moving Bullet to Target

	local TargetGunTable: GunUpgrades.Upgrade = GunUpgrades["Upgrade" .. Upgrade]
	local BulletToDestinationTime = (TargetPos.Position - HumanoidRootPart.Position).Magnitude/TargetGunTable.Bullet.Properties.Speed -- Calculates Speed with a Module which is Divided with the Magnitude of the TargetPostion, and the OriginPostiion (HumanoidRootPart.Position)

	local NewBullet = TargetGunTable.Bullet.Obj:Clone()
	NewBullet.Parent = workspace
	NewBullet.Position = Gun.Handle.Position

	local ShootTI = TweenInfo.new(BulletToDestinationTime, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
	NewBullet.Orientation = Mouse.Hit.LookVector
	local MoveBulletTween

	-- The Tween for the Bullet Moving to the Targeted Position
	MoveBulletTween = TweenService:Create(NewBullet, ShootTI, {CFrame = TargetPos}) -- || No Collision In Way

	MoveBulletTween:Play()
	
	-- || Effects
	
	local ExplodeAtGun = EffectsFolder.ExplodeAtGun:Clone()
	ExplodeAtGun.Parent = Gun.Tip
	ExplodeAtGun:Emit(16)
	
	task.spawn(function()
		MoveBulletTween.Completed:Wait()
		CreateBulletEffects(NewBullet)
	end)
	
	task.wait(5)
	NewBullet:Destroy()

end

Gun.Activated:Connect(function()
	FireBullet()
end)

Script 2:


---// This Other Script is For Visuals (Stil in the Gun Game), such as Arm Drag, Arms, Gun Drag, Etc.
-----------------------------------------------------------<<< Variables

---// Player Variables

local Player = game.Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Backpack = Player.Backpack
local HumanoidRootPart: Part = Character:WaitForChild("HumanoidRootPart")

while not Backpack do
	task.wait()
end

local Camera = workspace.CurrentCamera
local Mouse = Player:GetMouse()
local Storage = game.ReplicatedStorage

local GunFolder = Storage:WaitForChild("Gun")
local ModulesFolder = Storage:WaitForChild("Modules")
local EffectsFolder = GunFolder:WaitForChild("Effects")

Camera.FieldOfView = 75
game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, false)

local Cloneable = Storage:WaitForChild("Cloneable")
local StorageArmsFolder = Cloneable:WaitForChild("Arms")
local Gun = Character:WaitForChild("Gun")
local GunHandle: Part = Gun:WaitForChild("Handle")

-----------------------------------------------------------<<< Arms

local Arms = StorageArmsFolder:Clone()

---// Positioning the Arms

Arms.Parent = workspace
Arms:MoveTo(HumanoidRootPart.Position + Vector3.new(0, -.1, 0))

--// Welding the Arms to the Character

for _, v in Arms:GetChildren() do
	if not v:FindFirstChildWhichIsA("WeldConstraint") then
		continue
	end
	v:FindFirstChildWhichIsA("WeldConstraint").Part0 = v
	v:FindFirstChildWhichIsA("WeldConstraint").Part1 = HumanoidRootPart
end

----------------------------------------------------------->>>


I ran out of code of the gun system, as this was something I made just today.
The Next script is part of a TDS game that I made.


-----------------------------------------------------------------------<<< VARIABLES
--// Services

local PhysicsService = game:GetService("PhysicsService")
local TweenService = game:GetService("TweenService")

--// Instances

local CoreStorage = game.ReplicatedStorage.CoreStorage
local FunctionalityFolder = CoreStorage.Functionality
local CloneableFolder = FunctionalityFolder.Cloneable

local ZombiesFolder = FunctionalityFolder.Zombies
local Charger = ZombiesFolder.Charger
local Infected = ZombiesFolder.Infected

local WavesModule = require(script.Waves)
local StartBlock: Part = workspace.Start
local TestingMap = workspace["Testing Map"]

local Path = TestingMap.Path
local TargetPositions = Path.TargetPositions
local SoundsFolder = FunctionalityFolder.Sounds

local EventsFolder = FunctionalityFolder.Events
local OnWaveStartEvent = EventsFolder.OnWaveStart
local SkipWaveVoteEvent = EventsFolder.SkipWaveVote

local TowersFolder = FunctionalityFolder.Towers
local TowerInstances = TowersFolder.Instances
local Fighter = TowerInstances.Fighter

--// Set Variables

local CurrentWave = 1
local AmountSkipped = 0

-----------------------------------------------------------------------<<< LEADERSTATS

game.Players.PlayerAdded:Connect(function(Player)
	
	local leaderstats = Instance.new("Folder", Player)
	leaderstats.Name = "leaderstats"
	
	local Cash = Instance.new("IntValue", leaderstats)
	Cash.Name = "Cash"
	Cash.Value = 100000
	
end)

-----------------------------------------------------------------------<<< EARLY CODE

---// TIMER

local ChangeTimerEvent = EventsFolder.ChangeTimer
local SkipButtonIsVisible

local function ChangePlayerTimer(Type: string)
	if Type == "PreWave_Countdown" then -- Checks if the RemoteEvent is Requesting a Countdown Before Wave
		for i=5, 0, -1 do
			ChangeTimerEvent:FireAllClients(i, true) -- Fires a RemoteEvent to all Clients
			task.wait(1)
		end
	end
end

local PlayerJoinEvent = EventsFolder.PlayerJoinEvent

game.Players.PlayerAdded:Connect(function(Player)
	PlayerJoinEvent:FireClient(Player, SkipButtonIsVisible, "Wave " .. CurrentWave, workspace.Creations.CreatedTowers:GetChildren())	
end)

---// Useful Functions

--- This Function Checks If a Zombie is in the Range of a Tower
local function GetPartsTouching(Part: Part, Exlusions: "Parent" | BoolValue, Type: string)
	
	local filter = OverlapParams.new() -- Creates a Filter
	
	if Type == "ZomTouching" then
		filter.FilterType = Enum.RaycastFilterType.Include
		-- A loop adding all other zombies into the filter.

		for _, v in workspace.CreatedZombies:GetChildren() do
			local zomSens: Part = v:FindFirstChild("Sensor")
			if not zomSens then continue end
			filter:AddToFilter(zomSens)
		end

	else
		filter.FilterType = Enum.RaycastFilterType.Exclude
		if Exlusions then
			filter:AddToFilter(Exlusions)
		end
	end
	
	local cframe, size = Part.CFrame, Part.Size
	return workspace:GetPartBoundsInBox(cframe, size, filter) -- returns the result of what is inside the zombies.
	
end


----// This Next Script is for when a Client Places a Tower

local TowerID = 0

PlaceTowerEvent.OnServerEvent:Connect(function(Player, Tower: Model, TowerTable, TowerPos: CFrame)
	
	Player.leaderstats.Cash.Value -= TowerTable.Costs.BaseCost -- Checks if the Player has Enough Money
	Tower:SetAttribute("Level", 0) -- Sets the Level of the Tower (Base Level 0 as it is a new tower)
	Tower:SetAttribute("Player", Player.Name) -- Sets the value of who places the tower
	Tower:SetAttribute("Attacking", false)
	TowerID += 1 -- Increases ID to make this tower different from the rest.

	--// Cloning the Tower in Replicated Storage
	local TowerHumanoid: Humanoid = Tower:WaitForChild("Humanoid")	
	local TargetTower = Tower:Clone()
	local RootPart: Part = TargetTower:WaitForChild("HumanoidRootPart")

	--// Setting its Variables
	TargetTower.Name = TargetTower.Name .. TowerID	
	TargetTower.Parent = workspace.Creations.CreatedTowers
	RootPart.CFrame = TowerPos
	
	local TowerTableRange = TowerTable.TowerStats.Base.Range
	CreateRangeSensor(TargetTower, TowerTableRange, RootPart, TowerTable)
	
	PlaceTowerEvent:FireClient(Player, TargetTower) -- Fires to the client that its tower was succesfully placed
	ServerPlaceTowerEvent:FireAllClients(TargetTower)
	
end)
